/**
 * HTTP Client with retry logic and error handling
 */
import { HttpClient, RequestOptions } from './types';
export declare class FetchHttpClient implements HttpClient {
    private baseUrl;
    private defaultTimeout;
    private defaultRetryAttempts;
    private defaultRetryDelay;
    private bearerToken?;
    constructor(baseUrl: string, timeout?: number, retryAttempts?: number, retryDelay?: number);
    setBearerToken(token: string): void;
    clearBearerToken(): void;
    get<T>(url: string, options?: RequestOptions): Promise<T>;
    post<T>(url: string, data?: any, options?: RequestOptions): Promise<T>;
    put<T>(url: string, data?: any, options?: RequestOptions): Promise<T>;
    delete<T>(url: string, options?: RequestOptions): Promise<T>;
    private request;
    private executeWithRetry;
    private handleResponse;
    private createErrorFromResponse;
    private shouldRetry;
    private normalizeError;
    private delay;
}
//# sourceMappingURL=http-client.d.ts.map