import { SdkConfig, UserResponse, PresignResponse, JobResponse, JobStatusResponse, JobRead, Artifact, JobType } from './types';
export declare class OneShotClient {
    private httpClient;
    private isAuthenticated;
    constructor(config: SdkConfig);
    /**
     * Authenticate user with email and password
     */
    login(email: string, password: string): Promise<UserResponse>;
    /**
     * Register a new user account
     */
    register(email: string, password: string): Promise<UserResponse>;
    /**
     * Get current user profile
     */
    getMe(): Promise<UserResponse['user']>;
    /**
     * Generate presigned URL for file upload
     */
    presignUpload(filename: string, contentType: string, fileSize: number, idempotencyKey?: string): Promise<PresignResponse>;
    /**
     * Upload file to presigned URL
     */
    uploadFile(presignedUrl: string, file: File | Blob, contentType: string): Promise<void>;
    /**
     * Create a new AI processing job
     */
    createJob(pipeline: JobType | string, inputUrl: string, params?: Record<string, any>, targetUrl?: string, idempotencyKey?: string): Promise<JobResponse>;
    /**
     * Get job status and progress
     */
    getJob(jobId: string): Promise<JobStatusResponse>;
    /**
     * List user's jobs with pagination
     */
    listJobs(skip?: number, limit?: number): Promise<JobRead[]>;
    /**
     * Get artifacts for a specific job
     * Note: The backend doesn't have a dedicated artifacts endpoint yet,
     * so we extract artifacts from the job response
     */
    listArtifacts(jobId: string): Promise<Artifact[]>;
    /**
     * Poll job status until completion
     */
    waitForJob(jobId: string, options?: {
        pollingInterval?: number;
        timeout?: number;
        onProgress?: (job: JobStatusResponse) => void;
    }): Promise<JobStatusResponse>;
    /**
     * Get user's plan limits and usage
     */
    getUserLimits(): Promise<any>;
    /**
     * Logout - clear authentication token
     */
    logout(): void;
    /**
     * Check if client is authenticated
     */
    isAuth(): boolean;
    /**
     * Set authentication token manually
     */
    setAuthToken(token: string): void;
    private ensureAuthenticated;
    private delay;
}
export declare function createOneShotClient(config: SdkConfig): OneShotClient;
export declare const JobTemplates: {
    faceRestore: (inputUrl: string, params?: {
        model?: string;
        enhance?: boolean;
    }) => {
        pipeline: JobType;
        inputUrl: string;
        params: {
            model?: string;
            enhance: boolean;
            face_restore: string;
        };
    };
    faceSwap: (inputUrl: string, targetUrl: string, params?: {
        blend?: number;
        lora?: string;
    }) => {
        pipeline: JobType;
        inputUrl: string;
        targetUrl: string;
        params: {
            blend: number;
            lora: string;
        };
    };
    upscale: (inputUrl: string, params?: {
        scale?: number;
        model?: string;
    }) => {
        pipeline: JobType;
        inputUrl: string;
        params: {
            scale?: number;
            model: string;
            scale_factor: number;
        };
    };
};
//# sourceMappingURL=client.d.ts.map