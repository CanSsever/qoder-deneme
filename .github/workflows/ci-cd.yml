name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 apps/ tests/ --max-line-length=100 --extend-ignore=E203,W503
          black --check apps/ tests/
          isort --check-only apps/ tests/

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=apps --cov-report=xml --cov-report=term-missing
        env:
          DATABASE_URL: sqlite:///test.db
          JWT_SECRET_KEY: test-secret-key
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          S3_BUCKET_NAME: test-bucket

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          # Install deployment dependencies
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          
          # Set deployment variables
          export IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          export DEPLOYMENT_ID="${{ github.sha }}-$(date +%s)"
          
          # Run deployment script
          make deploy:staging

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run smoke tests
          ./scripts/smoke-test.sh ${{ secrets.STAGING_URL }}

      - name: Rollback on failure
        if: failure()
        run: |
          make rollback:staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          # Production deployment with additional safety checks
          export IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          export DEPLOYMENT_ID="${{ github.sha }}-$(date +%s)"
          
          # Run production deployment
          make deploy:production

      - name: Run production smoke tests
        run: |
          sleep 60  # Longer wait for production
          ./scripts/smoke-test.sh ${{ secrets.PRODUCTION_URL }}

      - name: Rollback on failure
        if: failure()
        run: |
          make rollback:production