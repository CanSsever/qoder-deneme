#!/usr/bin/env bash
# Real Replicate Integration Smoke Test
# Tests end-to-end functionality with real Replicate API tokens
# Usage: TOKEN_A=<jwt_a> TOKEN_B=<jwt_b> bash backend/tests/model_smoke.sh

set -euo pipefail

# Configuration
API=${API:-http://localhost:8000}
: "${TOKEN_A:?set TOKEN_A environment variable with JWT for user A}"
: "${TOKEN_B:?set TOKEN_B environment variable with JWT for user B}"
: "${MODEL_PROVIDER:?set MODEL_PROVIDER=replicate}"
: "${REPLICATE_API_TOKEN:?set REPLICATE_API_TOKEN}"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counters
TESTS_PASSED=0
TESTS_FAILED=0

echo -e "${BLUE}üöÄ REAL REPLICATE INTEGRATION SMOKE TEST${NC}"
echo "=============================================="
echo "API: $API"
echo "Model Provider: $MODEL_PROVIDER"
echo "Replicate Token: ${REPLICATE_API_TOKEN:0:20}..."
echo ""

# Helper function to test HTTP response
test_response() {
    local description="$1"
    local expected_code="$2"
    local actual_code="$3"
    local endpoint="$4"
    
    if [ "$actual_code" = "$expected_code" ]; then
        echo -e "${GREEN}‚úì${NC} $description (HTTP $actual_code)"
        ((TESTS_PASSED++))
    else
        echo -e "${RED}‚úó${NC} $description - Expected HTTP $expected_code, got $actual_code"
        echo "  Endpoint: $endpoint"
        ((TESTS_FAILED++))
        return 1
    fi
}

# Helper function to extract JSON field
extract_json() {
    python3 -c "import json,sys; data=json.load(sys.stdin); print(data$1)" 2>/dev/null || python -c "import json,sys; data=json.load(sys.stdin); print(data$1)"
}

# Helper function to check JSON field exists
check_json_field() {
    python3 -c "import json,sys; data=json.load(sys.stdin); assert '$1' in data and data['$1'] is not None, 'Missing field: $1'" 2>/dev/null || python -c "import json,sys; data=json.load(sys.stdin); assert '$1' in data and data['$1'] is not None, 'Missing field: $1'"
}

echo -e "${YELLOW}üìã Step 1: Prerequisites Validation${NC}"
echo "------------------------------------"

# Validate environment
if [ "$MODEL_PROVIDER" != "replicate" ]; then
    echo -e "${RED}‚úó${NC} MODEL_PROVIDER must be 'replicate', got '$MODEL_PROVIDER'"
    exit 1
fi

if [ -z "$REPLICATE_API_TOKEN" ]; then
    echo -e "${RED}‚úó${NC} REPLICATE_API_TOKEN is required"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} Environment variables validated"

echo ""
echo -e "${YELLOW}üìã Step 2: User Bootstrap${NC}"
echo "-------------------------"

# Bootstrap User A
echo "Bootstrapping User A profile..."
response=$(curl -fsS -H "Authorization: Bearer $TOKEN_A" "$API/api/bootstrap-profile")
echo -e "${GREEN}‚úì${NC} User A profile bootstrapped"

# Bootstrap User B  
echo "Bootstrapping User B profile..."
response=$(curl -fsS -H "Authorization: Bearer $TOKEN_B" "$API/api/bootstrap-profile")
echo -e "${GREEN}‚úì${NC} User B profile bootstrapped"

echo ""
echo -e "${YELLOW}üìã Step 3: Input Validation${NC}"
echo "----------------------------"

# Get User A UID for file path
user_a_response=$(curl -fsS -H "Authorization: Bearer $TOKEN_A" "$API/api/bootstrap-profile")
uid_a=$(echo "$user_a_response" | extract_json "['user']['id']")
echo "User A UID: $uid_a"

# Check if input file exists (simulate upload)
input_path="uploads/$uid_a/in.png"
echo "Expected input path: $input_path"
echo -e "${GREEN}‚úì${NC} Input path validated (assuming upload completed)"

echo ""
echo -e "${YELLOW}üìã Step 4: Job Creation${NC}"
echo "----------------------"

# Create restore job
echo "Creating restore job for User A..."
job_data='{
    "job_type": "restore",
    "input_image_url": "'$input_path'",
    "parameters": {
        "model": "gfpgan"
    }
}'

job_response=$(curl -fsS -X POST "$API/api/jobs" \
    -H "Authorization: Bearer $TOKEN_A" \
    -H "Content-Type: application/json" \
    -d "$job_data")

job_id=$(echo "$job_response" | extract_json "['id']")
echo "Job ID: $job_id"

# Validate job creation response
echo "$job_response" | check_json_field "id"
echo "$job_response" | check_json_field "job_type"
echo "$job_response" | check_json_field "status"

echo -e "${GREEN}‚úì${NC} Job created successfully"

echo ""
echo -e "${YELLOW}üìã Step 5: Job Execution (First Run)${NC}"
echo "-----------------------------------"

# Execute job
echo "Executing job (first run)..."
run_response=$(curl -fsS -X POST "$API/api/jobs/$job_id/run" \
    -H "Authorization: Bearer $TOKEN_A")

echo "$run_response" | check_json_field "id"
echo -e "${GREEN}‚úì${NC} Job execution started"

# Wait for completion (with timeout)
echo "Waiting for job completion..."
timeout=180  # 3 minutes
start_time=$(date +%s)

while true; do
    current_time=$(date +%s)
    elapsed=$((current_time - start_time))
    
    if [ $elapsed -gt $timeout ]; then
        echo -e "${RED}‚úó${NC} Job execution timed out after ${timeout}s"
        exit 1
    fi
    
    # Check job status
    status_response=$(curl -fsS -H "Authorization: Bearer $TOKEN_A" "$API/api/jobs/$job_id")
    status=$(echo "$status_response" | extract_json "['status']")
    
    echo "Job status: $status (${elapsed}s elapsed)"
    
    if [ "$status" = "succeeded" ]; then
        echo -e "${GREEN}‚úì${NC} Job completed successfully"
        final_job_data="$status_response"
        break
    elif [ "$status" = "failed" ] || [ "$status" = "error" ]; then
        echo -e "${RED}‚úó${NC} Job failed with status: $status"
        echo "Job data: $status_response"
        exit 1
    fi
    
    sleep 5
done

echo ""
echo -e "${YELLOW}üìã Step 6: Idempotency Test (Second Run)${NC}"
echo "----------------------------------------"

# Get credit balance before second run
credits_before=$(curl -fsS -H "Authorization: Bearer $TOKEN_A" "$API/api/credits/balance" | extract_json "['balance']")
echo "Credits before second run: $credits_before"

# Execute job again (should be idempotent)
echo "Executing job again (should be idempotent)..."
second_run_response=$(curl -fsS -X POST "$API/api/jobs/$job_id/run" \
    -H "Authorization: Bearer $TOKEN_A")

echo "$second_run_response" | check_json_field "id"

# Check that status is still succeeded and no additional credits charged
sleep 2
final_status_response=$(curl -fsS -H "Authorization: Bearer $TOKEN_A" "$API/api/jobs/$job_id")
final_status=$(echo "$final_status_response" | extract_json "['status']")

if [ "$final_status" != "succeeded" ]; then
    echo -e "${RED}‚úó${NC} Job status changed after idempotent run: $final_status"
    exit 1
fi

# Check credit balance after second run
credits_after=$(curl -fsS -H "Authorization: Bearer $TOKEN_A" "$API/api/credits/balance" | extract_json "['balance']")
echo "Credits after second run: $credits_after"

if [ "$credits_before" != "$credits_after" ]; then
    echo -e "${RED}‚úó${NC} Credits were charged on idempotent run (before: $credits_before, after: $credits_after)"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} Idempotency test passed - no additional credits charged"

echo ""
echo -e "${YELLOW}üìã Step 7: Output Validation${NC}"
echo "----------------------------"

# Check output path
output_path=$(echo "$final_job_data" | extract_json "['output_image_url']")
echo "Output path: $output_path"

# Validate output path format
if [[ ! "$output_path" =~ ^outputs/$uid_a/ ]]; then
    echo -e "${RED}‚úó${NC} Invalid output path format: $output_path"
    echo "Expected format: outputs/$uid_a/..."
    exit 1
fi

echo -e "${GREEN}‚úì${NC} Output path format validated"

echo ""
echo -e "${YELLOW}üìã Step 8: RLS Isolation Test${NC}"
echo "-----------------------------"

# User B should not be able to see User A's job
echo "Testing RLS isolation - User B listing jobs..."
user_b_jobs=$(curl -fsS -H "Authorization: Bearer $TOKEN_B" "$API/api/jobs")

# Check that User B's job list doesn't contain User A's job
job_found=$(echo "$user_b_jobs" | python3 -c "
import json, sys
data = json.load(sys.stdin)
job_id = '$job_id'
found = any(job.get('id') == job_id for job in data)
print('true' if found else 'false')
" 2>/dev/null || echo "$user_b_jobs" | python -c "
import json, sys
data = json.load(sys.stdin)
job_id = '$job_id'
found = any(job.get('id') == job_id for job in data)
print('true' if found else 'false')
")

if [ "$job_found" = "true" ]; then
    echo -e "${RED}‚úó${NC} RLS VIOLATION: User B can see User A's job"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} RLS isolation verified - User B cannot see User A's job"

# Test direct access to User A's job by User B (should return 404)
echo "Testing direct job access by User B..."
response=$(curl -s -w "HTTPSTATUS:%{http_code}" -H "Authorization: Bearer $TOKEN_B" "$API/api/jobs/$job_id")
status_code=$(echo "$response" | grep -o '[0-9]*$')

if [ "$status_code" != "404" ]; then
    echo -e "${RED}‚úó${NC} Expected 404 for User B accessing User A's job, got $status_code"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} Direct job access properly blocked (404)"

echo ""
echo -e "${BLUE}üìä SMOKE TEST RESULTS${NC}"
echo "====================="
echo -e "Tests passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ MODEL SMOKE OK${NC}"
    echo "=============================="
    echo ""
    echo "‚úÖ Replicate provider integration working"
    echo "‚úÖ Job creation and execution successful"  
    echo "‚úÖ Idempotency controls functioning"
    echo "‚úÖ Output path generation correct"
    echo "‚úÖ RLS isolation verified"
    echo "‚úÖ Price protection active"
    echo ""
    echo -e "${GREEN}READY FOR PROD MODEL TRAFFIC${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}‚ùå SMOKE TEST FAILED${NC}"
    echo "Please review the errors above and fix before production deployment."
    exit 1
fi