{
  "info": {
    "name": "OneShot API Production Smoke Tests",
    "description": "Comprehensive smoke tests for production deployment validation",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.yourdomain.com",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_user_email",
      "value": "smoketest@yourdomain.com",
      "type": "string"
    },
    {
      "key": "test_user_password",
      "value": "SmokeTest123!",
      "type": "string"
    },
    {
      "key": "job_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "01. Health Checks",
      "item": [
        {
          "name": "Basic Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Health endpoint returns 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is under 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Readiness Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Readiness endpoint returns 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All dependencies are healthy\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('healthy');",
                  "    pm.expect(response.checks).to.be.an('object');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/readyz",
              "host": ["{{base_url}}"],
              "path": ["readyz"]
            }
          }
        },
        {
          "name": "Root Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Root endpoint accessible\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"API information present\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('version');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          }
        }
      ]
    },
    {
      "name": "02. Authentication",
      "item": [
        {
          "name": "Login - Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Access token received\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "});",
                  "",
                  "pm.test(\"User information present\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_user_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User info retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data is valid\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.email).to.eql(pm.collectionVariables.get('test_user_email'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            }
          }
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid login rejected\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message present\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "03. Upload Service",
      "item": [
        {
          "name": "Get Upload Presigned URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Presigned URL generated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Upload URL and fields present\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('upload_url');",
                  "    pm.expect(response).to.have.property('fields');",
                  "    pm.expect(response.upload_url).to.be.a('string');",
                  "});",
                  "",
                  "pm.test(\"Response time acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"filename\": \"test-image.jpg\",\n  \"content_type\": \"image/jpeg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/uploads/presign",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "uploads", "presign"]
            }
          }
        }
      ]
    },
    {
      "name": "04. Job Processing",
      "item": [
        {
          "name": "Create Face Restoration Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Job created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Job ID returned\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('job_id');",
                  "    pm.expect(response.job_id).to.be.a('string');",
                  "    ",
                  "    // Store job ID for subsequent tests",
                  "    pm.collectionVariables.set('job_id', response.job_id);",
                  "});",
                  "",
                  "pm.test(\"Job status is queued\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('queued');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"pipeline\": \"face_restoration\",\n  \"input_image_url\": \"https://example.com/test-image.jpg\",\n  \"parameters\": {\n    \"enhancement_level\": 0.8\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/jobs",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "jobs"]
            }
          }
        },
        {
          "name": "Get Job Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Job status retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Job details present\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('job_id');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('pipeline');",
                  "    pm.expect(response.job_id).to.eql(pm.collectionVariables.get('job_id'));",
                  "});",
                  "",
                  "pm.test(\"Valid job status\", function () {",
                  "    const response = pm.response.json();",
                  "    const validStatuses = ['queued', 'processing', 'completed', 'failed'];",
                  "    pm.expect(validStatuses).to.include(response.status);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/jobs/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "jobs", "{{job_id}}"]
            }
          }
        },
        {
          "name": "Create Job - Invalid Pipeline",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid pipeline rejected\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Validation error message present\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"pipeline\": \"invalid_pipeline\",\n  \"input_image_url\": \"https://example.com/test-image.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/jobs",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "jobs"]
            }
          }
        }
      ]
    },
    {
      "name": "05. Security Tests",
      "item": [
        {
          "name": "Unauthorized Access - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized access blocked\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Authentication error message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            }
          }
        },
        {
          "name": "Rate Limiting Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Rate limiting headers present\", function () {",
                  "    pm.expect(pm.response.headers.get('X-RateLimit-Limit')).to.not.be.null;",
                  "});",
                  "",
                  "pm.test(\"Response time acceptable under load\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "HTTPS Redirect Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"HTTPS enforced\", function () {",
                  "    pm.expect(pm.request.url.protocol).to.eql('https');",
                  "});",
                  "",
                  "pm.test(\"Security headers present\", function () {",
                  "    pm.expect(pm.response.headers.get('Strict-Transport-Security')).to.not.be.null;",
                  "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.not.be.null;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "06. Performance Tests",
      "item": [
        {
          "name": "API Response Time",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response time under 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test(\"Response size reasonable\", function () {",
                  "    pm.expect(pm.response.responseSize).to.be.below(10000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running test against:', pm.collectionVariables.get('base_url'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response headers include CORS', function () {",
          "    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.not.be.null;",
          "});"
        ]
      }
    }
  ]
}