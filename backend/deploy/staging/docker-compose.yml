version: '3.8'

services:
  # Reverse Proxy with Traefik
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./acme.json:/acme.json
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - web
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik.service=api@internal"

  # Main Application
  app:
    image: ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
    container_name: oneshot-app
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - web
      - internal
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - SUPERWALL_SIGNING_SECRET=${SUPERWALL_SIGNING_SECRET}
      - ENTITLEMENTS_DEFAULT_PLAN=${ENTITLEMENTS_DEFAULT_PLAN}
      - DEV_BILLING_MODE=${DEV_BILLING_MODE}
      - RUNPOD_API_KEY=${RUNPOD_API_KEY}
      - COMFYUI_BASE_URL=${COMFYUI_BASE_URL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.app.tls.certresolver=cloudflare"
      - "traefik.http.services.app.loadbalancer.server.port=8000"
      - "traefik.docker.network=web"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker
  worker:
    image: ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
    container_name: oneshot-worker
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - internal
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - RUNPOD_API_KEY=${RUNPOD_API_KEY}
      - COMFYUI_BASE_URL=${COMFYUI_BASE_URL}
    command: ["python", "worker_main.py"]

  # Redis (local for caching and queues)
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  web:
    external: true
  internal:
    external: false

volumes:
  redis_data: